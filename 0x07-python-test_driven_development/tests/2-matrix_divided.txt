=================================
 Test Library 2-matrix_divided.py
=================================

This library has one function called
``matrix_divided(matrix, div)``
which returns a new_matrix = matrix / div.

No Errors
=========

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


Errors
=======
``matrxi_divided(matrix, div) will raise a ``TypeError``` exception in many cases by design.

The function will raise TypeError if any of the rows of matrix is not a list

::
    >>> matrix = [(1, 2), "hey", [2, 3, 1, 0]]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The function will raise a TypeError in case not all rows have the same length even though all are lists
    
::
    >>> matrix = [[2, 1], [5, 6, 7], [8, 9, 0]]
    >>> matrix_divided(matrix, 5)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

The function will raise a Type error in case any of the values of the matrix lists are non-numbers
    
::
    >>> matrix = [[1, "m", 10], ["I'm", [1, 2], 5]]
    >>> matrix_divided(matrix, 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The function will raise a TypeError if div is non-number

::
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, "I")
    Traceback (most recent call last):
    TypeError: div must be a number

::
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, None)
    Traceback (most recent call last):
    TypeError: div must be a number

::
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(None)
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

The function will raise ZeroDivisionError if div is equal to zero

::
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

And if its presented with 'inf'

::
    >>> matrix_divided(matrix, float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

::
    >>> matrix_divided(matrix, float('nan'))
    [[nan, nan, nan], [nan, nan, nan]]
