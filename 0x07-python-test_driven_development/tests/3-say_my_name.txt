===============================
 Test Library 3-say_my_name.py
===============================

This library has one function called
``say_my_name(first_name, last_name="")``

Which prints the full name in the form of "My name is <first_name> <last_name>".

Strings
=======

The function accepts only strings as arguments and raises TypeErrors otherwise

::
    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Nour", "Ibrahim")
    My name is Nour Ibrahim

::
    >>> say_my_name("Andy")
    My name is Andy 


Errors
=======
``say_my_name(first_name, last_name="") will raise a ``TypeError``` exception if any of its arguments are not strings.

The function will fail in case one of the arguments is not a string type

::
    >>> say_my_name(1, "2")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("Hey", 5)
    Traceback (most recent call last):
    TypeError: last_name must be a string

The function will fail in case one of its arguments is an iterable
    
::
    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

The function will fail in case one of the numbers is "NaN"

::
    >>> say_my_name(float('nan'))
    Traceback (most recent call last):
    TypeError: first_name must be a string

Ana What happens if there're no arguments given to the function

::
    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
